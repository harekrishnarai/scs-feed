name: Daily Supply Chain Security Reports

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '30 18 * * *'
  workflow_dispatch: # Allow manual trigger for testing

permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  fetch-supply-chain-reports:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm install axios cheerio @octokit/rest rss-parser
        
    - name: Ensure notifications directory structure
      run: |
        # Create notifications directory if it doesn't exist
        mkdir -p notifications
        
    - name: Create report fetcher script
      run: |
        cat > fetch_reports.js << 'EOF'
        const axios = require('axios');
        const cheerio = require('cheerio');
        const Parser = require('rss-parser');
        const fs = require('fs');
        const path = require('path');        // RSS/News sources for supply chain security
        const sources = [
          {
            name: "Bleeping Computer Security",
            url: "https://www.bleepingcomputer.com/feed/",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "dependency", "dependencies", "package", "packages", "npm", "pypi", "malicious package", "software supply", "third-party", "component", "library", "libraries", "vendor", "upstream", "downstream", "repository", "repo"]
          },
          {
            name: "The Hacker News",
            url: "https://feeds.feedburner.com/TheHackersNews",
            type: "rss", 
            keywords: ["supply chain", "supply-chain", "dependency", "dependencies", "package", "packages", "malicious", "backdoor", "software supply", "third-party", "component", "library", "npm", "pypi", "repository", "compromise", "poisoning", "typosquatting"]
          },
          {
            name: "Schneier on Security",
            url: "https://www.schneier.com/feed/",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "software", "security", "dependency", "component", "vendor", "third-party", "library", "trust", "integrity", "provenance"]
          },
          {
            name: "Krebs on Security",
            url: "https://krebsonsecurity.com/feed/",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "software", "dependency", "vendor", "third-party", "component", "compromise", "breach", "attack"]
          },
          {
            name: "CISA Advisories",
            url: "https://www.cisa.gov/news.xml",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "software", "vulnerability", "dependency", "component", "vendor", "third-party", "SBOM", "provenance", "integrity"]
          },
          {
            name: "Endor Labs Blog",
            url: "https://www.endorlabs.com/blog/rss.xml",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "dependency", "dependencies", "open source", "malicious", "vulnerability", "SBOM", "risk", "artifact", "component", "library", "package", "security", "policy", "governance"]
          },
          {
            name: "Checkmarx Blog",
            url: "https://checkmarx.com/blog/feed/",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "dependency", "dependencies", "open source", "vulnerability", "SBOM", "CI/CD", "pipeline", "malicious", "component", "library", "package", "security", "DevSecOps"]
          },
          {
            name: "GitHub Security Blog",
            url: "https://github.blog/security/feed/",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "dependency", "dependencies", "npm", "malicious", "github actions", "sigstore", "SBOM", "package", "component", "security", "vulnerability", "provenance", "attestation"]
          },
          {
            name: "Cisco Outshift",
            url: "https://outshift.cisco.com/blog/rss.xml",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "attack", "dependency", "malware", "case study", "security", "breach", "compromise", "vendor", "third-party"]
          },
          {
            name: "JFrog Security Blog",
            url: "https://jfrog.com/blog/feed/",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "malicious package", "open source", "dependency", "dependencies", "vulnerability", "component", "library", "artifact", "repository", "security", "DevSecOps"]
          },
          {
            name: "Kiuwan Blog",
            url: "https://www.kiuwan.com/blog/feed/",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "dependency", "dependencies", "open source", "regulation", "SBOM", "component", "library", "security", "compliance", "governance"]
          },          {
            name: "CircleCI Blog",
            url: "https://circleci.com/blog/feed.xml",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "CI/CD", "pipeline", "dependency", "dependencies", "security", "DevSecOps", "component", "library", "package", "build", "deployment"]
          },
          {
            name: "Socket.dev RSS",
            url: "https://rss.app/feeds/2NKFiwNFpKtgyl8r.xml",
            type: "rss",
            keywords: ["supply chain", "supply-chain", "dependency", "dependencies", "malicious package", "npm", "pypi", "vulnerability", "open source", "security", "component", "library", "package", "backdoor", "typosquatting", "socket"]
          }
        ];// Threat intelligence and vulnerability sources
        const apiSources = [
          {
            name: "OpenSSF Malicious Packages",
            url: "https://api.github.com/repos/ossf/malicious-packages/commits",
            type: "github"
          },
          {
            name: "OpenSSF Package Analysis",
            url: "https://api.github.com/repos/ossf/package-analysis/commits",
            type: "github"
          },{
            name: "Sonatype Security Research",
            url: "https://blog.sonatype.com/rss.xml",
            type: "rss",
            keywords: ["malicious", "supply chain", "supply-chain", "vulnerability", "dependency", "dependencies", "component", "library", "package", "security", "open source", "artifact", "repository", "DevSecOps", "SBOM", "nexus", "maven", "npm", "pypi", "nuget", "third-party", "typosquatting", "backdoor", "trojan", "compromised", "infected", "poisoning"]
          }
        ];        async function fetchRSSFeed(source) {
          try {
            console.log(`Starting fetch for ${source.name}...`);
            const parser = new Parser({
              timeout: 10000, // 10 second timeout
              headers: {
                'User-Agent': 'Supply-Chain-Monitor/1.0'
              }
            });
            const feed = await parser.parseURL(source.url);
              const relevantItems = feed.items.filter(item => {
              // Date filtering - only include articles from today or yesterday
              const articleDate = new Date(item.pubDate);
              const today = new Date();
              const yesterday = new Date(today);
              yesterday.setDate(today.getDate() - 1);
              
              // Reset time to start of day for accurate comparison
              const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
              const yesterdayStart = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
              const articleDateStart = new Date(articleDate.getFullYear(), articleDate.getMonth(), articleDate.getDate());
              
              // Skip articles that are not from today or yesterday
              if (articleDateStart < yesterdayStart) {
                return false;
              }
              
              const content = (item.title + ' ' + (item.contentSnippet || item.content || '') + ' ' + (item.categories || []).join(' ')).toLowerCase();
              
              // Enhanced keyword matching with partial matches, stemming, and contextual analysis
              return source.keywords.some(keyword => {
                const keywordLower = keyword.toLowerCase();
                
                // Direct match
                if (content.includes(keywordLower)) return true;
                
                // Handle common variations and partial matches
                if (keywordLower.includes('supply chain') || keywordLower.includes('supply-chain')) {
                  if (content.includes('supply') && content.includes('chain')) return true;
                  // Also catch software supply chain variations
                  if (content.includes('software supply') || content.includes('code supply')) return true;
                }
                
                // Handle dependency/dependencies variations
                if (keywordLower.includes('dependencies') && content.includes('dependency')) return true;
                if (keywordLower.includes('dependency') && content.includes('dependencies')) return true;
                if (keywordLower.includes('dependencies') && content.includes('deps')) return true;
                if (keywordLower.includes('dependency') && content.includes('deps')) return true;
                
                // Handle package/packages variations
                if (keywordLower.includes('packages') && content.includes('package')) return true;
                if (keywordLower.includes('package') && content.includes('packages')) return true;
                if (keywordLower.includes('package') && content.includes('pkg')) return true;
                
                // Handle library/libraries variations
                if (keywordLower.includes('libraries') && content.includes('library')) return true;
                if (keywordLower.includes('library') && content.includes('libraries')) return true;
                if (keywordLower.includes('library') && content.includes('lib')) return true;
                if (keywordLower.includes('libraries') && content.includes('libs')) return true;
                
                // Handle component/components variations
                if (keywordLower.includes('component') && content.includes('components')) return true;
                if (keywordLower.includes('components') && content.includes('component')) return true;
                
                // Enhanced security context matching - look for combinations
                if (keywordLower === 'security' && (
                  content.includes('third-party') || 
                  content.includes('third party') ||
                  content.includes('opensource') || 
                  content.includes('open-source') ||
                  content.includes('open source') ||
                  content.includes('npm') ||
                  content.includes('pypi') ||
                  content.includes('maven') ||
                  content.includes('nuget') ||
                  content.includes('composer') ||
                  content.includes('rubygems') ||
                  content.includes('cargo') ||
                  content.includes('homebrew') ||
                  content.includes('apt') ||
                  content.includes('yum') ||
                  content.includes('pip') ||
                  content.includes('pnpm') ||
                  content.includes('yarn') ||
                  content.includes('bower')
                )) return true;
                
                // Enhanced malicious/attack indicators
                if (keywordLower === 'malicious' && (
                  content.includes('trojan') ||
                  content.includes('backdoor') ||
                  content.includes('malware') ||
                  content.includes('poisoning') ||
                  content.includes('typosquatting') ||
                  content.includes('compromised') ||
                  content.includes('infected') ||
                  content.includes('hijacked')
                )) return true;
                
                // Vulnerability-related enhancements
                if (keywordLower === 'vulnerability' && (
                  content.includes('cve-') ||
                  content.includes('exploit') ||
                  content.includes('zero-day') ||
                  content.includes('0-day') ||
                  content.includes('critical') ||
                  content.includes('high severity') ||
                  content.includes('remote code execution') ||
                  content.includes('rce')
                )) return true;
                
                // DevSecOps and CI/CD enhancements
                if (keywordLower === 'devsecops' && (
                  content.includes('ci/cd') ||
                  content.includes('pipeline') ||
                  content.includes('build') ||
                  content.includes('deploy') ||
                  content.includes('jenkins') ||
                  content.includes('github actions') ||
                  content.includes('gitlab ci') ||
                  content.includes('azure devops') ||
                  content.includes('continuous integration')
                )) return true;
                
                // SBOM and provenance enhancements
                if ((keywordLower === 'sbom' || keywordLower === 'provenance') && (
                  content.includes('software bill') ||
                  content.includes('bill of materials') ||
                  content.includes('attestation') ||
                  content.includes('signed') ||
                  content.includes('sigstore') ||
                  content.includes('transparency') ||
                  content.includes('verification')
                )) return true;
                
                // Open source specific enhancements
                if (keywordLower.includes('open source') && (
                  content.includes('oss') ||
                  content.includes('foss') ||
                  content.includes('github') ||
                  content.includes('gitlab') ||
                  content.includes('bitbucket') ||
                  content.includes('sourceforge') ||
                  content.includes('community')
                )) return true;
                
                return false;
              });
            }).slice(0, 5); // Limit to 5 most recent relevant items
            
            console.log(`Found ${relevantItems.length} relevant items from ${source.name}`);
            return relevantItems.map(item => ({
              title: item.title,
              link: item.link,
              pubDate: item.pubDate,
              summary: item.contentSnippet || item.content?.substring(0, 200) + '...' || 'No summary available',
              source: source.name
            }));
          } catch (error) {
            console.error(`Error fetching ${source.name}:`, error.message);
            return [];
          }
        }        async function fetchGitHubCommits(source) {
          try {
            const response = await axios.get(source.url, {
              timeout: 10000, // 10 second timeout
              headers: {
                'User-Agent': 'Supply-Chain-Monitor/1.0',
                'Accept': 'application/vnd.github.v3+json'
              }
            });
            
            let recentCommits = [];
              // Special handling for malicious-packages repository
            if (source.name === "OpenSSF Malicious Packages") {
              for (const commit of response.data.slice(0, 10)) {
                // Date filtering - only include commits from today or yesterday
                const commitDate = new Date(commit.commit.author.date);
                const today = new Date();
                const yesterday = new Date(today);
                yesterday.setDate(today.getDate() - 1);
                
                // Reset time to start of day for accurate comparison
                const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
                const yesterdayStart = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
                const commitDateStart = new Date(commitDate.getFullYear(), commitDate.getMonth(), commitDate.getDate());
                
                // Skip commits that are not from today or yesterday
                if (commitDateStart < yesterdayStart) {
                  continue;
                }
                
                try {
                  // Fetch detailed commit info to get file changes
                  const commitResponse = await axios.get(commit.url, {
                    timeout: 10000,
                    headers: {
                      'User-Agent': 'Supply-Chain-Monitor/1.0',
                      'Accept': 'application/vnd.github.v3+json'
                    }
                  });
                  
                  const commitData = commitResponse.data;
                  const files = commitData.files || [];
                  
                  // Look for added malicious packages
                  const maliciousPackages = files
                    .filter(file => file.status === 'added' && file.filename.includes('malicious/'))
                    .map(file => {
                      const pathParts = file.filename.split('/');
                      const ecosystem = pathParts[1]; // e.g., 'npm', 'pypi', 'maven'
                      const packagePath = pathParts.slice(2).join('/');
                      
                      return {
                        ecosystem: ecosystem,
                        package: packagePath.replace('.json', ''),
                        filename: file.filename
                      };
                    });
                  
                  if (maliciousPackages.length > 0) {
                    maliciousPackages.forEach(pkg => {
                      recentCommits.push({
                        title: `🚨 Malicious ${pkg.ecosystem.toUpperCase()} Package: ${pkg.package}`,
                        link: commit.html_url,
                        pubDate: commit.commit.author.date,
                        summary: `New malicious package detected in ${pkg.ecosystem} ecosystem: "${pkg.package}". This package has been identified as malicious and added to the OpenSSF database. Ecosystem: ${pkg.ecosystem.toUpperCase()}`,
                        source: source.name,
                        ecosystem: pkg.ecosystem,
                        packageName: pkg.package
                      });
                    });
                  }
                  
                  // Rate limiting for API calls
                  await new Promise(resolve => setTimeout(resolve, 200));
                  
                } catch (detailError) {
                  console.error(`Error fetching commit details for ${commit.sha}:`, detailError.message);
                }
                
                // Limit to prevent too many API calls
                if (recentCommits.length >= 10) break;
              }            } else {
              // Default behavior for other GitHub sources with date filtering
              const today = new Date();
              const yesterday = new Date(today);
              yesterday.setDate(today.getDate() - 1);
              
              // Reset time to start of day for accurate comparison
              const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
              const yesterdayStart = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
              
              recentCommits = response.data
                .filter(commit => {
                  const commitDate = new Date(commit.commit.author.date);
                  const commitDateStart = new Date(commitDate.getFullYear(), commitDate.getMonth(), commitDate.getDate());
                  return commitDateStart >= yesterdayStart;
                })
                .slice(0, 3)
                .map(commit => ({
                  title: commit.commit.message.split('\n')[0],
                  link: commit.html_url,
                  pubDate: commit.commit.author.date,
                  summary: commit.commit.message.substring(0, 200) + '...',
                  source: source.name
                }));
            }
            
            console.log(`Found ${recentCommits.length} relevant items from ${source.name}`);
            return recentCommits;
          } catch (error) {
            console.error(`Error fetching ${source.name}:`, error.message);
            return [];
          }
        }

        async function generateDailyReport() {
          console.log('Starting daily report generation...');
          const today = new Date();
          const dateStr = today.toISOString().split('T')[0];
          const folderPath = path.join(process.cwd(), dateStr);
          
          // Create date folder
          if (!fs.existsSync(folderPath)) {
            fs.mkdirSync(folderPath, { recursive: true });
          }
          
          let allReports = [];
          
          // Fetch RSS feeds
          for (const source of sources) {
            console.log(`Fetching from ${source.name}...`);
            const reports = await fetchRSSFeed(source);
            allReports = allReports.concat(reports);
            await new Promise(resolve => setTimeout(resolve, 1000)); // Rate limiting
          }
          
          // Fetch API sources
          for (const source of apiSources) {
            console.log(`Fetching from ${source.name}...`);
            if (source.type === 'github') {
              const reports = await fetchGitHubCommits(source);
              allReports = allReports.concat(reports);
            } else if (source.type === 'rss') {
              const reports = await fetchRSSFeed(source);
              allReports = allReports.concat(reports);
            }
            await new Promise(resolve => setTimeout(resolve, 1000)); // Rate limiting
          }
          
          // Sort by date (most recent first)
          allReports.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
          
          // Generate markdown report
          let markdown = `# Supply Chain Security Daily Report\n`;
          markdown += `**Date:** ${dateStr}\n`;
          markdown += `**Total Reports Found:** ${allReports.length}\n\n`;
          
          // Group by source for both report generation and summary
          const groupedReports = {};
          allReports.forEach(report => {
            if (!groupedReports[report.source]) {
              groupedReports[report.source] = [];
            }
            groupedReports[report.source].push(report);
          });
          
          if (allReports.length === 0) {
            markdown += `## No Relevant Reports Found Today\n\n`;
            markdown += `No supply chain security incidents or reports were detected from monitored sources today.\n`;
          } else {
            markdown += `## Summary\n\n`;
            markdown += `This automated report aggregates supply chain security-related news, vulnerabilities, and research from multiple trusted sources.\n\n`;
            
            for (const [sourceName, reports] of Object.entries(groupedReports)) {
              markdown += `## ${sourceName}\n\n`;
              
              reports.forEach((report, index) => {
                markdown += `### ${index + 1}. ${report.title}\n\n`;
                markdown += `**Link:** [${report.link}](${report.link})\n\n`;
                markdown += `**Published:** ${new Date(report.pubDate).toLocaleDateString()}\n\n`;
                markdown += `**Summary:** ${report.summary.replace(/\n/g, ' ')}\n\n`;
                markdown += `---\n\n`;
              });
            }
          }
          
          // Add footer
          markdown += `## About This Report\n\n`;
          markdown += `This report is automatically generated daily by monitoring various cybersecurity news sources, `;
          markdown += `RSS feeds, and research repositories for supply chain security-related content.\n\n`;
          markdown += `**Monitored Sources:**\n`;
          [...sources, ...apiSources].forEach(source => {
            markdown += `- ${source.name}\n`;
          });
          markdown += `\n**Keywords Monitored:** supply chain, dependency, package, malicious package, `;
          markdown += `software supply, npm, pypi, backdoor, vulnerability\n\n`;
          markdown += `**Last Updated:** ${new Date().toISOString()}\n`;
          
          // Write to file
          const filePath = path.join(folderPath, 'supply-chain-report.md');
          fs.writeFileSync(filePath, markdown);
          
          console.log(`Report generated: ${filePath}`);
          console.log(`Found ${allReports.length} relevant reports`);
          
          // Also create a summary file for easy tracking
          const summaryPath = path.join(folderPath, 'summary.json');
          fs.writeFileSync(summaryPath, JSON.stringify({
            date: dateStr,
            totalReports: allReports.length,
            sources: allReports.length > 0 ? Object.keys(groupedReports || {}) : [],
            reportPath: filePath
          }, null, 2));
          
          console.log('Daily report generation completed successfully!');
          
          // Return the report file path for Telegram notification
          return filePath;
        }

        // Import the Telegram notification module if available
        let telegramNotify = null;
        try {
          telegramNotify = require('./notifications/telegram_notify');
          console.log('Telegram notification module loaded successfully');
        } catch (error) {
          console.log('Telegram notification module not available, notifications will be skipped');
        }
        
        console.log('Script starting...');
        generateDailyReport()
          .then((reportPath) => {
            console.log('Script completed successfully');
            
            // Send Telegram notification if module is available and properly configured
            if (telegramNotify && typeof telegramNotify.sendReportToTelegram === 'function') {
              console.log('Sending Telegram notifications...');
              return telegramNotify.sendReportToTelegram(reportPath)
                .catch(error => {
                  console.error('Telegram notification failed:', error.message);
                  // Don't fail the workflow if notifications fail
                });
            }
          })
          .then(() => {
            console.log('All tasks completed');
            process.exit(0);
          })
          .catch((error) => {
            console.error('Script failed:', error);
            process.exit(1);
          });
        EOF
        
    - name: Fetch and generate reports
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_IDS: ${{ secrets.TELEGRAM_CHAT_IDS }}
        GITHUB_SERVER_URL: ${{ github.server_url }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        timeout 300 node fetch_reports.js || {
          echo "Script timed out or failed after 5 minutes"
          exit 1
        }
        
    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EMAIL: ${{ vars.EMAIL }}
      run: |
        # Set the TODAY variable
        TODAY=$(date +%Y-%m-%d)
        echo "Today's date: $TODAY"
        
        git config --local user.email "$EMAIL"
        git config --local user.name "harekrishnarai"
        
        # Check if there are any changes
        echo "Checking git status..."
        git status
        
        if [[ -n $(git status --porcelain) ]]; then
          echo "Changes detected, committing..."
            # Add the entire date folder to ensure all files are included
          git add "$TODAY/" || {
            echo "Failed to add date folder to git"
            exit 1
          }
          
          # Also add any other generated files that might be useful
          git add fetch_reports.js || echo "fetch_reports.js not found or already tracked"
          
          git commit -m "Daily supply chain security report - $TODAY" || {
            echo "Commit failed"
            exit 1
          }
          
          echo "Pushing changes..."
          timeout 60 git push origin main || {
            echo "Push failed or timed out after 60 seconds"
            exit 1
          }
          
          echo "Report committed and pushed successfully"
        else
          echo "No changes to commit"
        fi
        
    - name: Create issue for high-priority alerts (optional)
      if: always()
      run: |
        # This section can be extended to create GitHub issues for critical alerts
        # Check if any reports contain critical keywords
        TODAY=$(date +%Y-%m-%d)
        if [[ -f "$TODAY/supply-chain-report.md" ]]; then
          CRITICAL_COUNT=$(grep -i "critical\|zero-day\|widespread\|major breach" "$TODAY/supply-chain-report.md" | wc -l)
          if [[ $CRITICAL_COUNT -gt 0 ]]; then
            echo "Found $CRITICAL_COUNT potential critical alerts in today's report"
            # You can extend this to create GitHub issues using GitHub CLI
          fi
        fi
