name: Daily Supply Chain Security Reports

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger for testing

permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  fetch-supply-chain-reports:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm install axios cheerio @octokit/rest rss-parser
        
    - name: Create report fetcher script
      run: |
        cat > fetch_reports.js << 'EOF'
        const axios = require('axios');
        const cheerio = require('cheerio');
        const Parser = require('rss-parser');
        const fs = require('fs');
        const path = require('path');

        // RSS/News sources for supply chain security
        const sources = [
          {
            name: "Bleeping Computer Security",
            url: "https://www.bleepingcomputer.com/feed/",
            type: "rss",
            keywords: ["supply chain", "dependency", "package", "npm", "pypi", "malicious package", "software supply"]
          },
          {
            name: "The Hacker News",
            url: "https://feeds.feedburner.com/TheHackersNews",
            type: "rss", 
            keywords: ["supply chain", "dependency", "package", "malicious", "backdoor", "software supply"]
          },
          {
            name: "Schneier on Security",
            url: "https://www.schneier.com/feed/",
            type: "rss",
            keywords: ["supply chain", "software", "security"]
          },
          {
            name: "Krebs on Security",
            url: "https://krebsonsecurity.com/feed/",
            type: "rss",
            keywords: ["supply chain", "software", "dependency"]
          },
          {
            name: "CISA Advisories",
            url: "https://www.cisa.gov/news.xml",
            type: "rss",
            keywords: ["supply chain", "software", "vulnerability"]
          }
        ];

        // Threat intelligence and vulnerability sources
        const apiSources = [
          {
            name: "OpenSSF Package Analysis",
            url: "https://api.github.com/repos/ossf/package-analysis/commits",
            type: "github"
          },
          {
            name: "Sonatype Security Research",
            url: "https://blog.sonatype.com/rss.xml",
            type: "rss",
            keywords: ["malicious", "supply chain", "vulnerability", "dependency"]
          }
        ];

        async function fetchRSSFeed(source) {
          try {
            console.log(`Starting fetch for ${source.name}...`);
            const parser = new Parser({
              timeout: 10000, // 10 second timeout
              headers: {
                'User-Agent': 'Supply-Chain-Monitor/1.0'
              }
            });
            const feed = await parser.parseURL(source.url);
            
            const relevantItems = feed.items.filter(item => {
              const content = (item.title + ' ' + (item.contentSnippet || item.content || '')).toLowerCase();
              return source.keywords.some(keyword => content.includes(keyword.toLowerCase()));
            }).slice(0, 5); // Limit to 5 most recent relevant items
            
            console.log(`Found ${relevantItems.length} relevant items from ${source.name}`);
            return relevantItems.map(item => ({
              title: item.title,
              link: item.link,
              pubDate: item.pubDate,
              summary: item.contentSnippet || item.content?.substring(0, 200) + '...' || 'No summary available',
              source: source.name
            }));
          } catch (error) {
            console.error(`Error fetching ${source.name}:`, error.message);
            return [];
          }
        }

        async function fetchGitHubCommits(source) {
          try {
            const response = await axios.get(source.url, {
              timeout: 10000, // 10 second timeout
              headers: {
                'User-Agent': 'Supply-Chain-Monitor/1.0',
                'Accept': 'application/vnd.github.v3+json'
              }
            });
            
            const recentCommits = response.data.slice(0, 3).map(commit => ({
              title: commit.commit.message.split('\n')[0],
              link: commit.html_url,
              pubDate: commit.commit.author.date,
              summary: commit.commit.message.substring(0, 200) + '...',
              source: source.name
            }));
            
            console.log(`Found ${recentCommits.length} commits from ${source.name}`);
            return recentCommits;
          } catch (error) {
            console.error(`Error fetching ${source.name}:`, error.message);
            return [];
          }
        }

        async function generateDailyReport() {
          const today = new Date();
          const dateStr = today.toISOString().split('T')[0];
          const folderPath = path.join(process.cwd(), dateStr);
          
          // Create date folder
          if (!fs.existsSync(folderPath)) {
            fs.mkdirSync(folderPath, { recursive: true });
          }
          
          let allReports = [];
          
          // Fetch RSS feeds
          for (const source of sources) {
            console.log(`Fetching from ${source.name}...`);
            const reports = await fetchRSSFeed(source);
            allReports = allReports.concat(reports);
            await new Promise(resolve => setTimeout(resolve, 1000)); // Rate limiting
          }
          
          // Fetch API sources
          for (const source of apiSources) {
            console.log(`Fetching from ${source.name}...`);
            if (source.type === 'github') {
              const reports = await fetchGitHubCommits(source);
              allReports = allReports.concat(reports);
            } else if (source.type === 'rss') {
              const reports = await fetchRSSFeed(source);
              allReports = allReports.concat(reports);
            }
            await new Promise(resolve => setTimeout(resolve, 1000)); // Rate limiting
          }
          
          // Sort by date (most recent first)
          allReports.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
          
          // Generate markdown report
          let markdown = `# Supply Chain Security Daily Report\n`;
          markdown += `**Date:** ${dateStr}\n`;
          markdown += `**Total Reports Found:** ${allReports.length}\n\n`;
          
          // Group by source for both report generation and summary
          const groupedReports = {};
          allReports.forEach(report => {
            if (!groupedReports[report.source]) {
              groupedReports[report.source] = [];
            }
            groupedReports[report.source].push(report);
          });
          
          if (allReports.length === 0) {
            markdown += `## No Relevant Reports Found Today\n\n`;
            markdown += `No supply chain security incidents or reports were detected from monitored sources today.\n`;
          } else {
            markdown += `## Summary\n\n`;
            markdown += `This automated report aggregates supply chain security-related news, vulnerabilities, and research from multiple trusted sources.\n\n`;
            
            for (const [sourceName, reports] of Object.entries(groupedReports)) {
              markdown += `## ${sourceName}\n\n`;
              
              reports.forEach((report, index) => {
                markdown += `### ${index + 1}. ${report.title}\n\n`;
                markdown += `**Link:** [${report.link}](${report.link})\n\n`;
                markdown += `**Published:** ${new Date(report.pubDate).toLocaleDateString()}\n\n`;
                markdown += `**Summary:** ${report.summary.replace(/\n/g, ' ')}\n\n`;
                markdown += `---\n\n`;
              });
            }
          }
          
          // Add footer
          markdown += `## About This Report\n\n`;
          markdown += `This report is automatically generated daily by monitoring various cybersecurity news sources, `;
          markdown += `RSS feeds, and research repositories for supply chain security-related content.\n\n`;
          markdown += `**Monitored Sources:**\n`;
          [...sources, ...apiSources].forEach(source => {
            markdown += `- ${source.name}\n`;
          });
          markdown += `\n**Keywords Monitored:** supply chain, dependency, package, malicious package, `;
          markdown += `software supply, npm, pypi, backdoor, vulnerability\n\n`;
          markdown += `**Last Updated:** ${new Date().toISOString()}\n`;
          
          // Write to file
          const filePath = path.join(folderPath, 'supply-chain-report.md');
          fs.writeFileSync(filePath, markdown);
          
          console.log(`Report generated: ${filePath}`);
          console.log(`Found ${allReports.length} relevant reports`);
          
          // Also create a summary file for easy tracking
          const summaryPath = path.join(folderPath, 'summary.json');
          fs.writeFileSync(summaryPath, JSON.stringify({
            date: dateStr,
            totalReports: allReports.length,
            sources: allReports.length > 0 ? Object.keys(groupedReports || {}) : [],
            reportPath: filePath
          }, null, 2));
        }

        generateDailyReport().catch(console.error);
        EOF
        
    - name: Fetch and generate reports
      run: |
        timeout 300 node fetch_reports.js || {
          echo "Script timed out or failed after 5 minutes"
          exit 1
        }
      
    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are any changes
        echo "Checking git status..."
        git status
        
        if [[ -n $(git status --porcelain) ]]; then
          echo "Changes detected, committing..."
          git add .
          git commit -m "Daily supply chain security report - $(date +%Y-%m-%d)" || {
            echo "Commit failed"
            exit 1
          }
          
          echo "Pushing changes..."
          timeout 60 git push origin main || {
            echo "Push failed or timed out after 60 seconds"
            exit 1
          }
          
          echo "Report committed and pushed successfully"
        else
          echo "No changes to commit"
        fi
        
    - name: Create issue for high-priority alerts (optional)
      if: always()
      run: |
        # This section can be extended to create GitHub issues for critical alerts
        # Check if any reports contain critical keywords
        TODAY=$(date +%Y-%m-%d)
        if [[ -f "$TODAY/supply-chain-report.md" ]]; then
          CRITICAL_COUNT=$(grep -i "critical\|zero-day\|widespread\|major breach" "$TODAY/supply-chain-report.md" | wc -l)
          if [[ $CRITICAL_COUNT -gt 0 ]]; then
            echo "Found $CRITICAL_COUNT potential critical alerts in today's report"
            # You can extend this to create GitHub issues using GitHub CLI
          fi
        fi
